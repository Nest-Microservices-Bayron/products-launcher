
services:
  # ==============================================
  # NATS Server
  # ==============================================
  nats-server:
    container_name: nats-server
    image: nats:2.10-alpine
    ports:
      - "4222:4222"  # Puerto principal de NATS
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
  # ==============================================
  # Client Gateway
  # ==============================================
  client-gateway:
    container_name: client-gateway
    build: 
      context: ./client-gateway
      dockerfile: Dockerfile.prod
    image: northamerica-northeast1-docker.pkg.dev/microservices/image-registry/client-gateway
    ports:
      - "${CLIENT_GATEWAY_PORT:-3000}:${CLIENT_GATEWAY_PORT:-3000}"
    environment:
      - PORT=${CLIENT_GATEWAY_PORT:-3000}
      - NATS_SERVERS=nats://nats-server:4222
      - NODE_ENV=production
      - LOG_LEVEL=info
    networks:
      - microservices-network
    depends_on:
      nats-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${CLIENT_GATEWAY_PORT:-3000}/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==============================================
  # Products Microservice
  # ==============================================
  products-ms:
    container_name: products-ms
    build: 
      context: ./products-ms
      dockerfile: Dockerfile.prod
      args:
        - PRODUCTS_DATABASE_URL=${PRODUCTS_DATABASE_URL}
    image: northamerica-northeast1-docker.pkg.dev/microservices/image-registry/products-ms
    environment:
      - PORT=3001
      - DATABASE_URL=${PRODUCTS_DATABASE_URL}
      - NATS_SERVERS=nats://nats-server:4222
      - NODE_ENV=production
      - LOG_LEVEL=info
    networks:
      - microservices-network
    depends_on:
      nats-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==============================================
  # Payments Microservice
  # ==============================================
  payments-ms:
    container_name: payments-ms
    build: 
      context: ./payments-ms
      dockerfile: Dockerfile.prod
    image: northamerica-northeast1-docker.pkg.dev/microservices/image-registry/payments-ms
    environment:
      - PORT=${PAYMENTS_MS_PORT:-3003}
      - NATS_SERVERS=nats://nats-server:4222
      - STRIPE_SECRET=${STRIPE_SECRET}
      - STRIPE_SUCCESS_URL=${STRIPE_SUCCESS_URL}
      - STRIPE_CANCEL_URL=${STRIPE_CANCEL_URL}
      - STRIPE_ENDPOINT_SECRET=${STRIPE_ENDPOINT_SECRET}
      - NODE_ENV=production
      - LOG_LEVEL=info
    networks:
      - microservices-network
    ports:
      - "${PAYMENTS_MS_PORT:-3003}:${PAYMENTS_MS_PORT:-3003}"
    depends_on:
      nats-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${PAYMENTS_MS_PORT:-3003}/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==============================================
  # Orders Microservice
  # ==============================================

  orders-ms:
    container_name: orders-ms
    build: 
      context: ./orders-ms
      dockerfile: Dockerfile.prod
      args:
        - ORDERS_DATABASE_URL=${ORDERS_DATABASE_URL}
    image: northamerica-northeast1-docker.pkg.dev/microservices/image-registry/orders-ms
    environment:
      - PORT=3002
      - DATABASE_URL=${ORDERS_DATABASE_URL}
      - NATS_SERVERS=nats://nats-server:4222
      - NODE_ENV=production
      - LOG_LEVEL=info
    networks:
      - microservices-network
    depends_on:
      nats-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  # ==============================================
  # Auth Microservice
  # ==============================================
  
  auth-ms:
    container_name: auth-ms
    build:
      context: ./auth-ms
      dockerfile: Dockerfile.prod
    image: northamerica-northeast1-docker.pkg.dev/microservices/image-registry/auth-ms
    environment:
      - PORT=3000
      - NATS_SERVERS=nats://nats-server:4222
      - DATABASE_URL=mongodb+srv://bayron:TDtalcqk6eic99h6@resourcecloud.b1qqh.mongodb.net/AuthDB
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=production
    networks:
      - microservices-network
    depends_on:
      nats-server:
        condition: service_started
    restart: unless-stopped
      

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  products-data:
    name: products-mysql-data-prod
    driver: local
  orders-data:
    name: orders-postgres-data-prod
    driver: local
